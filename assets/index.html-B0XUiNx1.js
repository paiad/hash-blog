import{_ as t,c as p,a as d,b as a,d as i,e,w as l,r as h,o as r}from"./app-Bc55BiT6.js";const k="/assets/img-eGxPxC70.png",c="/assets/img1-DQT2efCo.png",v="/assets/img3-CSqxUOKr.png",m="/assets/img4-KIH5KD2D.png",u="/assets/img5-Be7HIkIF.png",o="/assets/img6-UfxhJEaO.png",g="/assets/img7-DSOj_SBN.png",A="/assets/img8-rk-xPupW.png",E="/assets/img9-Cf3Pc6bX.png",D="/assets/img10-CVglUkM8.png",b="/assets/img15-CZCc0wdR.png",y="/assets/img14-CAMJECdr.png",C="/assets/img11-C1Tz4zj0.png",B="/assets/img12-BUJKECB4.png",f="/assets/img13-D5i4YI9C.png",I={};function S(N,s){const n=h("Plot");return r(),p("div",null,[s[94]||(s[94]=d(`<h2 id="_1-网络管理概论" tabindex="-1"><a class="header-anchor" href="#_1-网络管理概论"><span>1.网络管理概论</span></a></h2><h3 id="_1-1-网络管理的几个概念" tabindex="-1"><a class="header-anchor" href="#_1-1-网络管理的几个概念"><span>1.1 网络管理的几个概念</span></a></h3><p><mark>网络管理的任务：</mark></p><ol><li>监测网络的运行状态</li><li>控制网络的运行</li></ol><p><mark>网络管理的目标：</mark></p><ol><li>有效性 2. 可靠性 3. 开放性 4. 综合性 5. 安全性 6. 经济性</li></ol><p><mark>网络管理的对象：</mark></p><ol><li>硬件资源 2. 软件资源</li></ol><p>被管对象(Managed Object)的集合称之为MIB(Management Information Base)，网络中所有被管理的对象的信息都集中在MIB中。</p><p><mark>网络管理的标准：</mark></p><p>国际标准化组织(ISO)推出的OSI系统管理标准是<code>CMIS</code>与<code>CMIP</code></p><p>Internet工程工作小组(IETF)组织推出管理标准<code>SNMP</code>(最初使用是简单网关监控协议SGMP)</p><h4 id="rfc文档" tabindex="-1"><a class="header-anchor" href="#rfc文档"><span>RFC文档</span></a></h4><p>之后陆续公布在<code>RFC</code>(Request For Comments)文件中，即定义和规范SNMP协议的文档：</p><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li>RFC1155(SMI(SNMP的子集))</li><li>RFC1157(SNMP)</li><li>RFC1212(MIB定义)</li><li>RFC1213(MIB-2定义)</li></ul></div><p>1991年产生了远程网络监控<code>RMON</code>v1，1995年发展成<code>RMON</code>v2。这组标准定义了监控<code>局域网</code>网络通信管理信息库，配合SNMP使用。</p><h3 id="_1-2-网络管理的体系结构" tabindex="-1"><a class="header-anchor" href="#_1-2-网络管理的体系结构"><span>1.2 网络管理的体系结构</span></a></h3><h4 id="cmip-snmp" tabindex="-1"><a class="header-anchor" href="#cmip-snmp"><span>CMIP &amp; SNMP</span></a></h4><p>CMIP体系结构是一个通用的模型，他能够适应各种开放系统之间的管理通信和操作，开放关系之间既可以是平等的，也可以是主从关系，因此它 既能够进行分布式的管理，也能够进行集中式的管理。</p><p>SNMP体系结构起初是一个<code>集中式模型</code>。在一个系统中只有一个顶层管理站，管理站下设有多个代理，管理站中运行管理进程。</p><p>从SNMPv2开始才用于<code>分布式模型</code>，在此模型中可以有多个顶层管理站，这些管理站被称为管理服务器。在管理服务器和代理服务器之间 又加入了中间服务器。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-----------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">**管理服务器**  顶层管理站1号 顶层管理站2号 顶层管理站3号...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-----------------------------------------------------                   </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">**中间服务器**  (与管理服务器通信：运行代理进程；与代理通信运行：运行管理进程)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-----------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">*****代理*****  代理1号 代理2号 代理3号...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>网络管理体系结构</th><th>区别</th></tr></thead><tbody><tr><td>CMIP</td><td>通用、完备、ISO提出</td></tr><tr><td>SNMP</td><td>简单、实用、IETF提出</td></tr></tbody></table><h4 id="网络管理的基本模型" tabindex="-1"><a class="header-anchor" href="#网络管理的基本模型"><span>网络管理的基本模型</span></a></h4><ul><li>管理者：网络指令的发出者</li><li>网络代理：位于被管理者内部，负责把管理者发出的指令转化为本设备内部携带的指令</li><li>网络管理协议：网络管理者和网络代理之间通信的标准</li><li>MIB库：被管对象的管理信息都被放在MIB中</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>网络管理模型的核心是一对相互通信的系统管理实体。在这种体系结构中，一个系统中的管理进程担当管理者角色， 而另一个系统中的对等实体担当代理者角色，代理者负责提供对被管对象的访问。前者称为网络管理者，后者被称为管理代理。</p></div><h4 id="网络管理的模式" tabindex="-1"><a class="header-anchor" href="#网络管理的模式"><span>网络管理的模式</span></a></h4><ol><li>集中式网络管理模式</li><li>分布式网络管理模式</li><li>混合式网络管理模式</li></ol><h4 id="网络管理的软件结构" tabindex="-1"><a class="header-anchor" href="#网络管理的软件结构"><span>网络管理的软件结构</span></a></h4><ol><li>用户接口软件(用户通过网络管理接口与管理专用软件交互作用，监视和控制网络资源。)</li><li>管理专用软件(支持多种网络管理应用，适用于各种网络设备和网络配置。)</li><li>管理支持软件(包括MIB访问模块和通信协议栈。)</li></ol><h3 id="_1-3网络管理的功能" tabindex="-1"><a class="header-anchor" href="#_1-3网络管理的功能"><span>1.3网络管理的功能</span></a></h3><h4 id="_1-故障管理" tabindex="-1"><a class="header-anchor" href="#_1-故障管理"><span>1. 故障管理</span></a></h4><ul><li><code>故障检测和报警功能</code>：故障监视代理要随时记录网络系统出错的情况和可能引起故障的事件，并把这些信息存储在运行日志数据库中。</li><li><code>故障预测功能</code>：对各种可能引起故障的参数建立门限值并随时监视参数值变化，一旦超过门限值，就发送警报。</li><li><code>故障诊断和定位功能</code>：对设备和通信线路进行测试，找出故障原因和地点。</li></ul><h4 id="_2-配置管理" tabindex="-1"><a class="header-anchor" href="#_2-配置管理"><span>2. 配置管理</span></a></h4><ul><li><p><code>网络配置信息</code></p><ol><li>网络设备的拓扑关系，即存在性和连接关系。</li><li>网络设备的域名、IP地址，即寻址信息。</li><li>网络设备的运行特性，即运行参数。</li><li>网络设备的备份操作参数，即是否备份、备份启用条件。</li><li>网络设备的配置更改条件。</li></ol></li><li><p><code>配置管理的主要功能</code></p><ol><li>定义配置信息。</li><li>设置和修改设备属性。</li><li>定义和修改网络元素间的互连关系。</li><li>启动和终止网络运行。</li><li>发行软件。</li><li>检查参数值、互连关系和报告配置现状。</li></ol></li></ul><h4 id="_3-安全管理" tabindex="-1"><a class="header-anchor" href="#_3-安全管理"><span>3. 安全管理</span></a></h4><ul><li><code>安全信息维护</code><ol><li>记录系统中出现的各类事件</li><li>追踪安全设计试验，自动记录安全的重要事件</li><li>报告和接收侵犯安全的警示信号</li><li>经常维护和检查安全记录。</li><li>备份和保护敏感的文件。</li><li>研究每个正常用户的活动形象。</li></ol></li><li><code>资源访问控制</code><ol><li>资源访问控制包括认证服务和授权服务，以及对敏感资源访问授权的决策过程。</li><li>访问控制服务的目的是保护各种网络资源，这些资源中与网络管理有关的主要内容包括： 安全编码、源路由和路由记录信息、路由表、目录表、报警门限、计费信息</li></ol></li><li><code>网络安全技术</code><ol><li>数据加密技术</li><li>防火墙技术</li><li>网络安全扫描技术</li><li>网络入侵监测技术</li><li>黑客诱骗技术</li></ol></li></ul><h4 id="_4-性能管理" tabindex="-1"><a class="header-anchor" href="#_4-性能管理"><span>4. 性能管理</span></a></h4><ul><li><code>性能管理的基本功能</code><ol><li>实时采集与网络性能相关的数据。</li><li>分析和统计数据。</li><li>维护并检查系统的运行日志。</li><li>性能的预警。</li><li>生成性能分析报告。</li></ol></li><li><code>常用的网络性能测评指标</code><ol><li>吞吐量。</li><li>包（帧）延迟。</li><li>丢包（帧）率。</li><li>可用性。</li><li>响应时间。</li><li>利用率。</li></ol></li><li><code>网络性能的测评方法</code> 由于局域网操作系统平台的多样性，网络设备、传输介质及网络拓扑结构都有很大的区别，因此网络性能的测评非常复杂。 <ol><li>直接测量法。对网络的信道利用率、碰撞分布和吞吐率等参数进行动态数据统计，以得到测评结果。</li><li>模拟法。给网络建立数学模型，运用仿真程序通过数学计算得出网络相关参数指标。同时也可以与实测结果进行比较，经过多次校正得到真实的测评结果。</li><li>分析法。通过采用概率论、过程论和排队论等对各种网络进行模拟，其分析结果可用于对未来的网络进行优化设计。</li></ol></li></ul><h4 id="_5-计费管理" tabindex="-1"><a class="header-anchor" href="#_5-计费管理"><span>5. 计费管理</span></a></h4><ul><li><p><code>计费管理功能</code></p><ol><li>计算网络建设及运营成本，包括设备、网络服务、人工费用等成本。</li><li>统计网络及其所包含的资源的利用率，确定计费标准。</li><li>将应该缴纳的费用通知用户。</li><li>支持用户费用上限的设置。</li><li>在必须用多个通信实体才能完成通信时，能够把使用多个管理对象的费用结合起来。</li><li>保存收费账单及必要的原始数据，以备用户查询和质疑。</li></ol></li><li><p><code>计费管理的类型</code></p><ol><li>基于网络流量计费。网络流量计费是根据用户的网络或者用户的主机在一段时间内使用的网络流量收取用户费用的一种计费方式，主要用于专线（如DDN、E1、X.25线路等）接入用户。</li><li>基于使用时间计费。使用时间计费是根据用户使用网络的时间长短来收取用户费用的一种计费方式。该如ADSL接入网络的用户</li><li>基于网络服务计费。网络服务计费是根据用户使用网络服务的次数或时间来收取用户费用的一种计费方式。收取费用的服务包括电子邮件、数据库信息查询、光盘检索、网络游戏等。</li></ol></li><li><p><code>计费管理的子过程</code></p><ol><li>使用率度量过程。</li><li>计费处理过程。</li><li>账单管理过程。</li></ol></li><li><p><code>计费管理的管理对象</code></p><ol><li>使用率度量控制对象。</li><li>使用率度量数据对象。</li><li>使用率记录。</li></ol></li></ul><h2 id="_2-抽象语法表示" tabindex="-1"><a class="header-anchor" href="#_2-抽象语法表示"><span>2.抽象语法表示</span></a></h2><h3 id="_2-1-网络数据表示" tabindex="-1"><a class="header-anchor" href="#_2-1-网络数据表示"><span>2.1 网络数据表示</span></a></h3><p><code>表示层</code>的功能是提供统一的网络数据表示； 在互相通信的端系统中至少有一个<code>应用实体</code>（如SNMP、TELNET、FTP等）和一个<code>表示实体</code>（即ASN.1）。</p><ul><li>应用层：抽象语法表示<code>ASN.1</code> (Abstract Syntax Notation)是一种形式语言 提供统一的网络数据表示，用于定义应用数据的<code>抽象语法</code>和应用协议数据单元的结构。 OSI或SNMP管理信息库，都是用ASN.1定义的。</li><li>表示层：基本编码规则<code>BER</code> (Basic Encoding Rule)是一种编码规则， 用ASN.1定义的应用数据在传送过程中按照BER变换成比特串。</li></ul><h3 id="_2-2-asn-1" tabindex="-1"><a class="header-anchor" href="#_2-2-asn-1"><span>2.2 ASN.1</span></a></h3><p>当一个应用想发送一个数据结构时，可以将数据结构与其对应的ASN.1标识一起传给表示层。</p><h4 id="asn-1的文本约定" tabindex="-1"><a class="header-anchor" href="#asn-1的文本约定"><span>ASN.1的文本约定</span></a></h4><ol><li>多个空格和空行等效于一个空格。</li><li>用于表示值和字段的标识符、类型指针和模块名由大小写字母、数字和短线组成。</li><li>标识符以小写字母开头。</li><li>类型指针和模块名以大写字母开头。</li><li>ASN.1定义的内部类型全部用大写字母表示。</li><li>关键字全部用大写字母表示。</li><li>注释以一对短线（--）开始，以一对短线或行尾结束。</li></ol><hr><h4 id="抽象数据类型" tabindex="-1"><a class="header-anchor" href="#抽象数据类型"><span>抽象数据类型</span></a></h4><p>在ASN.1中，每一个数据类型都有一个标签(tag)(除了CHOICE和ANY) 标签有<code>类型</code>(如INTEGER)和<code>值</code>(如0)，数据类型由标签的类型和值唯一确定，这种机制在数据编码时有用。</p><p>标签类型分为以下4种：</p><ol><li><code>通用标签</code>：UNIVERSAL表示，由标准定义的。</li><li><code>应用标签</code>：APPLICATION表示，是由某个具体应用定义的类型。</li><li><code>上下文专用标签</code>：Context-Specific表示，这种标签在一定范围中适用。</li><li><code>私有标签</code>：PRIVATE表示，用户定义的标签。</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>a = int(5) a ::= [Application 0] INTEGER (应用标签)</p><p>a ::= [0] INTEGER</p><p>b ::= [1] (新标签) INTEGER (老标签)(上下文标签)</p><p>c ::= [1] (新标签) IMPLICIT INTEGER (老标签) --- ANSI.1定义的数据类型有20多种，基础数据类型标签都是UNIVERSAL。</p></div><p>数据类型可分为4大类：</p><ol><li><code>简单类型</code>，由单一成分构成的原子类型，包括INTEGER，BOOLEAN，...</li><li><code>构造类型</code>，由两种以上成分构成的构造类型，包括SEQUENCE，SEQUENCE OF,...</li><li><code>标签类型</code>，由已知类型定义的新类型</li><li><code>其他类型</code>，包括CHOICE和ANY两种类型</li></ol><p><strong>构造类型</strong></p><p>构造类型有序列和集合两种，分别用<code>SEQUENCE</code>和<code>SEQUENCE OF</code>表示不同类型和相同类型元素的序列，分别用<code>SET</code>和<code>SET OF</code>表示不同类型和相同类型元素的集合。 序列和集合的区别是前者的元素是有序的，而后者是无序的。</p><p><strong>标签类型</strong></p><p>标签类型可以是隐含的或明示的，分别用关键字IMPLICIT和EXPLICIT(可省略)表示。隐含标签的语义是用新标签替换老标签，因此编码时只编码新标签。 上例中，3个集合元素的上下文标签都是隐含的，因此编码时只编码上下文专用标签。明示标签的语义是在一个基类型上加上新标签，从而导出一个新类型。 事实上，明示标签类型是把基类型作为惟元素的构造类型，在编码时，新老标签都要编码，可见隐含标签可以产生较短的编码。 但明示标签也是有用的，特别用于基类型未定时，例如基类型为CHOICE或ANY类型。</p><p><strong>其他类型</strong></p><p>CHOICE和ANY是两个没有标签的类型，因为它们的值是未定的，而且类型也是未定的。当这种类型的变量被赋值时， 它们的类型和标签才能确定，可以说标签是运行时间确定的。</p><h4 id="子类型" tabindex="-1"><a class="header-anchor" href="#子类型"><span>子类型</span></a></h4><p>子类型是为了限制父类型的值的集合而导出的类型。</p><ol><li>单个值</li><li>值区间</li><li>允许字符</li><li>限制大小</li><li>包含子类型</li><li>内部子类型</li></ol><h3 id="_2-3-基本编码规则ber" tabindex="-1"><a class="header-anchor" href="#_2-3-基本编码规则ber"><span>2.3 基本编码规则BER</span></a></h3><ul><li>用ASN.1表示的变量必须转换为串行的字节流才能在网络中传输。</li><li>基本编码规则（Basic Encoding Rules，BER）：转换文本ASN.1语法到机读代码的算法</li></ul><p>BER传输语法的格式是TLV三元组&lt;标签Tag，长度 Length，值Value&gt;。</p><ul><li>Tag: 关于标签类别和编码格式的信息；</li><li>Length: 表示值（Value）字段的数据长度值</li><li>Value: 包含实际的数据。</li></ul><p>BER传输语法是基于八位组（由8比特组成，是编码的基本单位）<code>大端编码</code>的 其八位组中的二进制编号从8到1，高8位在左，约定第8位是最高有效位，第1位是最低有效位。</p><h4 id="标签字段" tabindex="-1"><a class="header-anchor" href="#标签字段"><span>标签字段</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    8   7    6             5   4   3   2   1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UNIVERSAL           0   0   (简单类型)     (标签号&gt;30时，标签字段需要多个字节)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">APPLICATION         0   1   (0:简单类型)   (第一个八位组后5位全为1，</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CONTEXT-SPECIFIC    1   0   (1:构造类型)    后继八位组除最后一个，</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PRIVATE             1   1                  最高位均为1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="长度字段" tabindex="-1"><a class="header-anchor" href="#长度字段"><span>长度字段</span></a></h4><p>BER编码中Length表示Value部分所占八位组的个数</p><p>格式主要有两大类：确定格式和不确定格式 在确定格式中又分为短、长两种格式。</p><ul><li>采用确定格式，当长度不大于127时，Length只在一个八位组中编码；当长度大于127时，在多个八位组中编码， 此时第一个八位组低七位表示的是Length所占的长度，后续八位组表示Value的长度。</li><li>采用不确定格式时，Length所在八位组固定编码为0x80，在Value后以两个0x00结尾。 可以在编码没有完全结束的情况下，可以先发送部分消息给对方。</li></ul><p>编码规则：</p><ol><li>若编码是简单类型，则使用确定格式。 短格式：长度字段仅一个八位组，最高位为0。 长格式：长度字段包含多个八位组，第1个字节最高位为1，其余7位表示后面有多少字节来表示值字段的长度。例如，25510可表示为10000001 11111111</li><li>若编码是构造类型，并且编码立即可用，则既可以使用确定格式，也可以使用非确定格式，由发送者选择。</li><li>若编码是构造类型，但编码不是立即可用，则使用非确定格式。</li></ol><h3 id="_2-4-宏定义" tabindex="-1"><a class="header-anchor" href="#_2-4-宏定义"><span>2.4 宏定义</span></a></h3><p>ASN.1的基本单位是<code>模块</code>，类似于C语言中的结构，用于定义一个抽象数据类型ASN.1。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>宏表示</td><td>用于定义宏的一种表示机制</td></tr><tr><td>宏定义</td><td>用宏表示定义的一个宏代表宏实例的集合</td></tr><tr><td>宏实例</td><td>用具体的值代替宏定义中的变量而产生的实例</td></tr></tbody></table><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li>抽象语法表示ASN.1定义了一组用来描述OSI网络上所传输的数据结构规则。在ASN.1中，每一个数据类型都有一个标签，包括标有类型和值。</li><li>ANSI.1定义的数据类型有20多种，标签类型都是UNIVERSAL。</li><li>用ASN.1定义的应用数据在传送过程中要按照一定的规则变换成比特串，这种规则就是基本编码规则（Basic Encoding Rule，BER）。</li><li>ASN.1提供了宏定义功能，可用于扩充语法，定义新的类型和值。</li></ul></div><h2 id="_3-internet管理信息结构" tabindex="-1"><a class="header-anchor" href="#_3-internet管理信息结构"><span>3.Internet管理信息结构</span></a></h2><ul><li>MIB：包含被管理资源以及元素信息的数据库 应用于在基于TCP/IP协议的网络</li><li>SMI：定义和构建MIB的通用性框架结构 <ul><li>SMI定义了MIB中被管对象使用的数据类型的表示和命名MIB中对象的方法</li><li>SMI定义了描述管理信息的规则</li><li>确定了可以用于MIB中的数据类型并说明对象在MIB内部怎么样表示和命名。</li></ul></li></ul><h3 id="_3-1-snmp管理体系结构" tabindex="-1"><a class="header-anchor" href="#_3-1-snmp管理体系结构"><span>3.1 SNMP管理体系结构</span></a></h3><p>在Internet中，网络管理信息存储在MIB中。</p><p>Internet最初的网络管理框架由4个文件定义，如图3-5所示，这就是SNMP第一版（SNMPv1）。</p><ul><li>RFC1155定义了管理信息结构（SMI），即规定了管理对象的语法和语义。 SMI主要说明了怎样定义管理对象和怎样访问管理对象</li><li>RFC1212说明了定义MIB模块的方法</li><li>RFC1213则定义了MIB-2管理对象的核心集合。这些管理对象是任何SNMP系统必须实现的。</li><li>RFC1157是SNMPv1的规范文件。</li></ul><h3 id="_3-2-mib的树结构" tabindex="-1"><a class="header-anchor" href="#_3-2-mib的树结构"><span>3.2 MIB的树结构</span></a></h3><p>层次树结构有3个作用：</p><ol><li>表示管理和控制关系</li><li>提供结构化的信息组织技术</li><li>提供了对象命名机制。</li></ol><h4 id="mib的数据类型" tabindex="-1"><a class="header-anchor" href="#mib的数据类型"><span>MIB的数据类型</span></a></h4><p>MIB中的简单数据类型:INTEGER、OCTET STRING、NULL、OBJECT IDENTIFIER 、SEQUENCE (OF)</p><p>MIB中的复杂数据类型:NetworkAddress、IpAddress、Counter、Gauge、TimeTicks、Opaque</p><ul><li><code>SYNTAX:</code></li></ul><p>表示对象类型的抽象语法。INTEGER、OCTET STRING...NetworkAddress、IpAddress、Counter...</p><ul><li><code>ACCESS:</code></li></ul><p>定义对象的访问方式。可选择的访问方式有只读(read-only)、读写(read-write)、只写(write-only)和不可访问(not-accessible)4种(MIB树中的非叶子节点不能访问)。</p><ul><li><code>STATUS:</code></li></ul><p>说明实现是否支持这种对象。 状态子句中定义了 必要的(mandatory) 任选的(optional) 过时的(obsolete)是指老标准支持而新标准不支持的类型 如果一个对象被说明为可取消的(deprecated)，表示当前必须支持这种对象，但在将来的标准中可能被取消。 :::</p><h3 id="_3-3-snmp管理信息结构" tabindex="-1"><a class="header-anchor" href="#_3-3-snmp管理信息结构"><span>3.3 SNMP管理信息结构</span></a></h3><p>为了规范管理信息模型，SNMP发布了管理信息结构（SMI）。</p><ul><li>RFC 1065描述了SMI,在用于管理TCP/IP网络的MIB中可用的信息的语法和类型。</li><li>SMI定义了SNMP框架所用信息的组织、组成和标识，规定了MIB中被管对象的数据类型及其表示和命名方法。</li><li>SMI的宗旨是保持了MIB的简单性和可扩展性，只允许存储<code>标量</code>和<code>二维数组</code>，不支持复杂的数据结构。从而简化了操作，加强了互操作性。</li></ul><p>SMI提供了以下标准化技术表示管理信息： （1）定义了MIB的层次结构； （2）提供了定义管理对象的语法结构； （3）规定了对象值的编码方法。</p><p>按照SMI定义的SNMP管理对象都具有3个属性：</p><ul><li>名字、语法和编码。 <ul><li>名字即对象标识符，唯一标识一个MIB对象；</li><li>语法即如何描述对象的信息，它用抽象语法标记法（ASN.1）来定义对象的数据结构；</li><li>编码：描述了一个管理对象的相关信息如何被格式化为适合网络传送的数据段，采用基本编码规则（BER）。</li></ul></li></ul><h4 id="表对象、行对象和列对象" tabindex="-1"><a class="header-anchor" href="#表对象、行对象和列对象"><span>表对象、行对象和列对象</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> -- The TCP connection table contains information about this</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          -- entity&#39;s existing TCP connections.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnTable OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  SEQUENCE OF TcpConnEntry</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  not-accessible</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;A table containing TCP connection-specific</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      information.&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcp 13 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnEntry OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  TcpConnEntry</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  not-accessible</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;Information about a particular current TCP</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      connection.  An object of this type is transient,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      in that it ceases to exist when (or soon after)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      the connection makes the transition to the CLOSED</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      state.&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              INDEX   { tcpConnLocalAddress,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                        tcpConnLocalPort,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                        tcpConnRemAddress,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                        tcpConnRemPort }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcpConnTable 1 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          TcpConnEntry ::=</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SEQUENCE {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                  tcpConnState</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      INTEGER,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                  tcpConnLocalAddress</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      IpAddress,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                  tcpConnLocalPort</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      INTEGER (0..65535),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                  tcpConnRemAddress</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      IpAddress,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                  tcpConnRemPort</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      INTEGER (0..65535)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnState OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  INTEGER {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          closed(1),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          listen(2),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          synSent(3),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          synReceived(4),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          established(5),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          finWait1(6),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          finWait2(7),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          closeWait(8),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          lastAck(9),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          closing(10),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          timeWait(11),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                          deleteTCB(12)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  read-write</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;The state of this TCP connection.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      The only value which may be set by a management</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      station is deleteTCB(12).  Accordingly, it is</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      appropriate for an agent to return a \`badValue&#39;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      response if a management station attempts to set</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      this object to any other value.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      If a management station sets this object to the</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      value deleteTCB(12), then this has the effect of</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      deleting the TCB (as defined in RFC 793) of the</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      corresponding connection on the managed node,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      resulting in immediate termination of the</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      connection.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      As an implementation-specific option, a RST</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      segment may be sent from the managed node to the</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      other TCP endpoint (note however that RST segments</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      are not sent reliably).&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcpConnEntry 1 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnLocalAddress OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  IpAddress</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  read-only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;The local IP address for this TCP connection.  In</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      the case of a connection in the listen state which</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      is willing to accept connections for any IP</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      interface associated with the node, the value</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      0.0.0.0 is used.&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcpConnEntry 2 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnLocalPort OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  INTEGER (0..65535)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  read-only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;The local port number for this TCP connection.&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcpConnEntry 3 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnRemAddress OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  IpAddress</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  read-only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;The remote IP address for this TCP connection.&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcpConnEntry 4 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          tcpConnRemPort OBJECT-TYPE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              SYNTAX  INTEGER (0..65535)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ACCESS  read-only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              STATUS  mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              DESCRIPTION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      &quot;The remote port number for this TCP connection.&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              ::= { tcpConnEntry 5 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>为什么 tcpConnState 不在 INDEX 中？</p><p>INDEX 字段主要用于唯一标识表中的每一行。</p><p>tcpConnState 代表 TCP 连接的状态（如 established、closed 等），它是连接的属性，而不是标识连接唯一性的条件。</p><p>因此，tcpConnState 不适合放在 INDEX 中。</p></div><p><img src="`+k+`" alt="tcpConnTable.png"></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">|XxxTable:X, XxxEntry:X.1, Xxxxxx.1.1/2/3/...|</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">tcpConnLocalAddress对象的OID：</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xxxxxxx.1.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">15这个实例的OID:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xxxxxxx.1.5. + Index(10.0.0.9. + 12. + 9.1.2.3. + 15) [[|] + [——]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.0.0.0这个实例的OID:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xxxxxxx.1.2. + Index(0.0.0.0. + 99. + 0.0.0.0. + 0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="词典顺序" tabindex="-1"><a class="header-anchor" href="#词典顺序"><span>词典顺序</span></a></h4><p>对象标识符是整数序列，这种序列反映了该对象MIB中的<code>逻辑位置</code>，同时表示了一种词典顺序。 只要按照一定的方式（如中序）遍历MIB树，就可以排出所有的对象及其实例的词典顺序。 对象的顺序对网络管理是很重要的。因为管理站可能不知道代理提供的MIB的组成，所以管理站要用某种手段搜索MIB树，在不知道对象标识符的情况下访问对象的值。</p><p>例如，为检索一个表项，管理站可以连续发出Get操作，按词典顺序得到预定的对象实例。</p><p><img src="`+c+'" alt="img.png"></p><h2 id="_4-管理信息库" tabindex="-1"><a class="header-anchor" href="#_4-管理信息库"><span>4.管理信息库</span></a></h2><h3 id="_4-1-mib简介" tabindex="-1"><a class="header-anchor" href="#_4-1-mib简介"><span>4.1 MIB简介</span></a></h3><p><img src="'+v+'" alt="img.png"></p><h4 id="system-系统组" tabindex="-1"><a class="header-anchor" href="#system-系统组"><span>system(系统组)</span></a></h4><p><img src="'+m+'" alt="img.png"></p><p>系统（System）组是MIB-2中最基本的一个组，包含一些最常用的被管对象。</p><ul><li>所有系统都必须包含System组。</li><li>网络管理系统一旦发现新的系统被加到网络中，首先需要访问该系统的这个组，来获取系统的名称、物理地点和联系人等信息。</li></ul><p>用于失效管理（故障管理）的System组对象</p><ol><li>sysObjectID中的对象标识符标明了实体的生产商</li><li>sysServices告知设备主要提供了哪些协议层服务。</li><li>sysUpTime告知一个系统已经运行了多长时间。失效管理查询该对象可以确定实体是否已重新启动。</li></ol><ul><li>sysServices:协议层服务。设L是协议层编号，如果使用了L层的协议，则二进制数值的第L位为1，否则为0。例如，一个主要在第三层运行的路由器将返回值0000100B，即4，而一个运行第四层和第七层服务的主机将返回值1001000B，即72。在不知道设备的功能时，该信息对于问题的解决是有用的。</li><li>sysUpTime:失效管理查询该对象可以确定实体是否已重新启动，如果查询获得的是一个一直增加的值就认为实体是Up的，如果小于以前的值，则自上次查询后系统重新启动了。</li></ul><h4 id="interfaces-接口组" tabindex="-1"><a class="header-anchor" href="#interfaces-接口组"><span>interfaces(接口组)</span></a></h4><p><img src="'+u+'" alt="img.png"></p><p><strong>重点</strong></p><ol><li>ifIndex(1)接口表惟一的索引项，索引值为1-ifNumber范围</li><li>ifAdminStatus(7)用于配置接口的管理状态，up(1) down(2) testing(3)[期待状态]</li><li>ifOperStatus(8)提供一个接口的当前操作状态，up(1) down(2) testing(3)[实际状态]</li></ol><table><thead><tr><th><strong>ifAdminStatus</strong></th><th><strong>ifOperStatus</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Up(1)</td><td>Up(1)</td><td>接口正常运行</td></tr><tr><td>Up(1)</td><td>Down(2)</td><td>接口失败，管理员期望运行但实际不可用</td></tr><tr><td>Down(2)</td><td>Down(2)</td><td>接口关闭，被管理员禁用</td></tr><tr><td>Testing(3)</td><td>Testing(3)</td><td>接口处于测试状态，不可传输数据</td></tr></tbody></table><h4 id="at-地址转换组" tabindex="-1"><a class="header-anchor" href="#at-地址转换组"><span>at(地址转换组)</span></a></h4><p><img src="'+o+'" alt="img.png"></p><p>MIB-2中地址转换组的对象已被收编到各个网络协议组（如Ip组）中，保留地址转换组仅仅是为了与MIB-1兼容。</p><h4 id="ip-ip组" tabindex="-1"><a class="header-anchor" href="#ip-ip组"><span>ip(IP组)</span></a></h4><p><img src="'+g+'" alt="img.png"></p><ol><li><p>用于失效管理的Ip组对象</p><ul><li>IP路由表（ipRouteTable）用于提供路由选择信息，IP路由表中的所有对象用于失效管理。</li><li>ipRouteDest给出目标地址的网络号，ipRouteIfIndex给出实体外出的接口，ipRouteMetric给出到目标地址的跳数，ipRouteNextHop给出下一站地址。</li></ul></li><li><p>用于配置管理的Ip组对象</p><ul><li>IP地址表（ipAddrTable）包含分配给该实体的IP地址的信息，每个地址被唯一地分配给一个物理地址。</li><li>在每个ipAddrEntry中，ipAdEntAddr和ipAdEntIfIndex分别告知IP地址和相应的接口，可以使用ipAdEntIfIndex把ipAddrTable项和一个Interfaces组ifTable项关联起来。ipAdEntNetMask给出了子网掩码，而ipAdEntBcastAddr告知广播地址。</li><li>IP路由表（ipRouteTable）把它的许多对象定义为可读写的，出于配置管理的目的，可以修改、新增、删除路由信息。</li></ul></li><li><p>用于性能管理的Ip组对象</p><ul><li>使用Ip组对象，性能管理应用可以测量实体输入和输出IP流量的百分率。</li><li>利用Interfaces组对象，实体接收到的总数据报数为所有接口的ipInUcastPkts和ifNUcastPkts的和，用该和除以<code>ipInReceives</code>可以得出接收到的IP数据报的比率。使用对象ipOutRequest可以对实体发送的数据报作类似的计算。</li><li>由于缺少系统资源等原因会导致丢弃数据报。对象<code>ipInDiscards</code>和<code>ipOutDiscards</code>分别给出了数据报在输入和输出时被丢弃的个数。</li></ul><p>使用Ip组对象可以计算IP数据报的错误率:</p><ul><li>IP输入错误率 =(ipInDiscards + ipInHdrErrors + ipInAddrErrors)/ ipInReceives</li><li>IP输出错误率 =(ipOutDiscards + ipOutNoRoutes)/ ipOutRequests</li></ul><p><code>ipForwDatagrams</code>告知设备对IP数据报转发的速率，如果在时刻x和时刻y被两次查询，则可得IP转发速度:</p><ul><li>IP转发速度 = (ipForwGatagramsy − ipForwDatagramsx)/(y − x)</li><li>IP输入速度 = (ipInReceivesy − ipInReceivesx)/(y − x)</li></ul></li><li><p>用于计费管理的Ip组对象</p><ul><li>Ip组对象ipOutRequests和ipInDelivers可用于计费管理。</li></ul></li></ol><h4 id="icmp" tabindex="-1"><a class="header-anchor" href="#icmp"><span>icmp</span></a></h4><p>了解即可</p><h4 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>tcp</span></a></h4><h4 id="udp" tabindex="-1"><a class="header-anchor" href="#udp"><span>udp</span></a></h4><h4 id="egp" tabindex="-1"><a class="header-anchor" href="#egp"><span>egp</span></a></h4><h4 id="transmission" tabindex="-1"><a class="header-anchor" href="#transmission"><span>transmission</span></a></h4><h4 id="snmp" tabindex="-1"><a class="header-anchor" href="#snmp"><span>snmp</span></a></h4><p>请看第五章</p><h2 id="_5-简单网络管理协议" tabindex="-1"><a class="header-anchor" href="#_5-简单网络管理协议"><span>5. 简单网络管理协议</span></a></h2><h3 id="_5-1-snmp的演变" tabindex="-1"><a class="header-anchor" href="#_5-1-snmp的演变"><span>5.1 SNMP的演变</span></a></h3><ul><li>1987年11月提出简单网关监控协议(SGMP)</li><li>简单网络管理协议第一版(SNMPv1)公布在1990年和1991年的几个RFC文件中，即RFC1155(SMI)、RFC1157(SNMP)、RFC 1212(MIB)、RFC 1213(MIB-2)</li><li>双轨制策略: <ul><li>SNMP满足当前的网络管理需要，并可平稳过渡到新的网络管理标准。</li><li>0SI网络管理(CMOT)作为长期解决办法，可提供更全面的管理功能，但需较长开发及接受过程。但0SI MIB采用面向对象模型，开发缓慢，SNMP无法顺利过渡。</li></ul></li></ul><p><img src="'+A+'" alt="img.png"></p><h3 id="_5-2-snmpv1" tabindex="-1"><a class="header-anchor" href="#_5-2-snmpv1"><span>5.2 SNMPv1</span></a></h3><h4 id="snmpv1协议数据单元" tabindex="-1"><a class="header-anchor" href="#snmpv1协议数据单元"><span>SNMPv1协议数据单元</span></a></h4><table><thead><tr><th><strong>PDU 类型</strong></th><th><strong>触发方</strong></th><th><strong>作用</strong></th><th><strong>方向</strong></th></tr></thead><tbody><tr><td>GetRequest</td><td>管理站</td><td>请求指定 MIB 对象的值</td><td>管理站 → 代理设备</td></tr><tr><td>GetNextRequest</td><td>管理站</td><td>请求 MIB 树中下一个对象的值</td><td>管理站 → 代理设备</td></tr><tr><td>SetRequest</td><td>管理站</td><td>修改 MIB 对象的值</td><td>管理站 → 代理设备</td></tr><tr><td>GetResponse</td><td>代理设备</td><td>响应管理站的请求，返回结果</td><td>代理设备 → 管理站</td></tr><tr><td>Trap</td><td>代理设备</td><td>主动通知管理站事件或异常</td><td>代理设备 → 管理站</td></tr></tbody></table><p><img src="'+E+'" alt="img.png"></p><p>除Trap PDU之外的四种PDU格式是相同的，共有五个字段：</p><ul><li>PDU类型：GetRequestPDU GetNextRequestPDU SetRequestPDU GetResponsePDU TrapPDU五种类型。</li><li>请求标识(request-id)：赋予每个请求报文唯一的整数，用于区分不同的请求。由于在具体实现中请求多是在后台执行的，因而当应答报文返回时要根据其中的请求标识与请求报文配对。请求标识的另一个作用是检测由不可靠的传输服务产生的重复报文。</li><li>错误状态(error-status)：表示代理在处理管理站的请求时可能出现的各种错误，共有6种错误状态，包括noError(0) tooBig (l) noSuchName(2) badValue (3) readOnly(4) genError(5)。对不同的操作，这些错误状态的含义不同。//ResponsePDU</li><li>错误索引(error-index)：当错误状态非0时指向出错的变量。</li><li>变量绑定表(variable-binding)：变量名和对应值的表，说明要检索或设置的所有变量及其值。在检索请求报文中，变量的值应为0。</li></ul><h4 id="报文发送与接收" tabindex="-1"><a class="header-anchor" href="#报文发送与接收"><span>报文发送与接收</span></a></h4><p><img src="'+D+'" alt="img.png"></p><h4 id="snmpv1操作" tabindex="-1"><a class="header-anchor" href="#snmpv1操作"><span>SNMPv1操作</span></a></h4><p><img src="'+b+'" alt="img_1.png"><mark>1. 检索简单对象</mark></p><p>检索简单标量对象值可用Get操作。如果变量绑定表中包含多个变量，则一次还可以检索多个标量对象的值。接收GetRequest的SNMP实体以请求标识相同的GetResponse响应。 GetResponse 操作具有<code>原子性</code>，如果所有请求的对象值可以得到，则给予应答；只要有一个对象的值得不到，则可能返回下列错误条件：</p><p>(1) 变量绑定表中的一个对象无法与MIB 中的任何对象标识符匹配，或者要检索的对象是一个数据块(子树或表)，没有对象实例生成。在此情况下，响应实体返回GetResponsePDU中错误状态为<code>noSuchName</code>，错误索引设置为一个数，指明有问题的变量。变量绑定表中不返回任何值。</p><p>(2) 响应实体可以提供所有要检索的值，但是变量太多，一个响应PDU 装不下，这往往是由下层协议数据单元大小限制的。这时响应实体返回一个应答PDU，错误状态字段置为<code>tooBig</code>。</p><p>(3) 响应实体如不能提供至少一个对象的值，则返回的PDU中错误状态字段置为<code>genError</code>，错误索引置一个数，指明有问题的变量。变量绑定表中不返回任何值。</p><hr><p>为了说明简单对象的检索过程，这是UDP组的一部分。我们可以在索命令中直接指明对象实例的标识符: <img src="'+y+`" alt="img.png"></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetRequest( udpInDatagrams.0, udpNoPorts.0, udpInErrors.0, udpOutDatagrams.0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">可以预期得到下面的响应:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetResponse(udpInDatagrams.0=100,udpNoPorts.0=1, udpInErrors.0=2, udpOutDatagrams.0=200)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">用GetNext命令以上的4个值</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">直接指明对象标识符:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetNextRequest( udpInDatagrams, udpNoPorts, udpInErrors, udpOutDatagrams)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">得到的响应与上例是相同的:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetResponse( udpInDatagrams.0=100,udpNoPorts.0=l,udpInErrors.0=2,udpOutDatagrams.0=200)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">可见标量\`对象实例标识符\`(例如udpInDatagrams.0)总是紧跟在\`对象标识符\`(例如udpInDatagrams)后面的。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>2. 检索未知对象</mark></p><p>GetNext命令检索变量名指示的下一个对象实例，但并不要求变量名是对象标识符或者是实例标识符。 利用GetNext的检索未知对象的特性可以发现MIB的结构。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">例如管理站不知道udp组有哪些变量，先试着发出命令:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetNextRequest (udp)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">得到的响应是:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetResponse(udpInDatagrams.0=100)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>3．检索表对象</mark></p><table><thead><tr><th><strong>ipRouteDest</strong></th><th><strong>ipRouteMetric</strong></th><th><strong>ipRouteNextHop</strong></th></tr></thead><tbody><tr><td>9.1.2.3</td><td>1</td><td>99.0.0.3</td></tr><tr><td>10.0.0.51</td><td>2</td><td>89.1.1.42</td></tr><tr><td>10.0.0.99</td><td>3</td><td>89.1.1.42</td></tr></tbody></table><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">假定管理站不知道该表的行数而想检索整个表则可以连续使用GetNext命令:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetNextRequest(ipRouteDest,ipRouteMetricl, ipRouteNextHop)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">得到了第一实例对象:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetResponse(ipRouteDest.9.1.2.3=9.1.2.3, ipRouteMetric1.9.1.2.3=3, ipRouteNextHop.9.1.2.3=99.0.0.3)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">注意IpRouteDest是IpRouteTable的Index</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>4. 表的更新和删除</mark></p><p>Set命令用于设置或更新变量的值。其PDU与Get相同，但在变量绑定表中必须包含要设置的变量名和值。 对于Set命令的应答也是GetResponse，同样是原子性的。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">//更新</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">想改变列对象ipRouteMetric1的第一个值，则可以发出命令</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SetRequest(ipRouteMetric1.9.1.2.3=9)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">得到的应答是:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetResponse(ipRouteMetric1.9.1.2.3=9)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">其效果是该对象的值由3变成了9。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">//删除</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">如果要删除表中的行，则可以把一个对象的值置为invalid:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SetRequest(ipRouteType.7.3.5.3=invalid)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">得到的响应说明表行确已删除:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GetResponse(ipRouteType.7.3.5.3=invalid)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>对于上述的表的删除是物理的还是逻辑的，是由具体实现决定的。在MIB-2中，只有两种表是可删除的:ipRouteTable包含ipRouteType，可取值invalid; ipNetToMediaTable包含ipNetToMediaType，可取值invalid。</p></div><h4 id="snmpv1的局限性" tabindex="-1"><a class="header-anchor" href="#snmpv1的局限性"><span>SNMPv1的局限性</span></a></h4><table><thead><tr><th>序号</th><th>限制说明</th></tr></thead><tbody><tr><td>1</td><td>由于轮询性能限制，不适合管理大网络。</td></tr><tr><td>2*</td><td>不适合检索大量数据。</td></tr><tr><td>3*</td><td>陷入报文是没有应答的，管理站是否收到陷入报文，代理不得而知。这样可能丢掉重要的管理信息。</td></tr><tr><td>4*</td><td>只提供简单团体名认证，安全措施不够。</td></tr><tr><td>5*</td><td>不能直接向被管理设备发送命令。</td></tr><tr><td>6</td><td>管理信息库MIB-2支持的管理对象有限，不足以完成复杂的管理功能。</td></tr><tr><td>7</td><td>不支持管理站之间的通信。</td></tr></tbody></table><h3 id="_5-3-snmpv2" tabindex="-1"><a class="header-anchor" href="#_5-3-snmpv2"><span>5.3 SNMPv2</span></a></h3><h4 id="对象的定义" tabindex="-1"><a class="header-anchor" href="#对象的定义"><span>对象的定义</span></a></h4><ol><li><p>数据类型: SNMPV2增加了两种新的数据类型Unsigned32和Counter64(计数器)。</p></li><li><p>UNITS子句: 在SNMPv2的OBJECT-TYPE宏定义中增加了UNITS子句。用文字说明与对象有关的度量单位。 当管理对象表示一种度量手段（如时间）时这个子句是有用的。</p></li><li><p>MAX-ACCESS子句: 类似于SNMPv1的ACCESS子句，说明最大的访问级别，与授权策略无关。</p><p>SNMPv2定义的访问类型中去掉了<code>write-only</code>类，增加了一个与概念行有关的访问类型<code>read-create（RFC1442）</code>，表示可读、可写和可生成。还增加了<code>aceessible-for-notify访问类（RFC1902）</code>。</p></li><li><p>STATUS子句: SNMPv2标准去掉了SNMPv1中的optional和mandatory，只有3种可选状态。 current表示在当前的标准中是有效的。 obsolete表示不必实现这种对象 deprecated表示对象已经过时了，但是为了兼容旧版本实现互操作，实现时还要支持这种对象。</p></li></ol><div class="hint-container important"><p class="hint-container-title">重要</p><p>SNMPv2的5种访问级别由小到大排列如下：</p><p>not-accessible；accessible-for-notify； read-only；read-write；read-create。</p></div><h4 id="表的定义" tabindex="-1"><a class="header-anchor" href="#表的定义"><span>表的定义</span></a></h4><p>与SNMPv1一样，SNMPv2的管理操作只能作用于标量对象，复杂的信息要用表来表示。 按照SNMPv2规范，表是行的序列，而行是列对象的序列。SNMPv2把表分为以下两类：</p><ol><li>禁止删除和生成行的表。这种表的最高的访问级别是read-write。在很多情况下这种表由代理控制，表中只包含read-only型的对象。</li><li>允许删除和生成行的表。这种表开始时可能没有行，由管理站生成和删除行。行数可由管理站或代理改变。</li></ol><p>在SNMPv2表的定义中必含有INDEX或AUGMENTS子句(原表上扩充新的纵列)，但是只能有两者其中之一。</p><h4 id="表的操作" tabindex="-1"><a class="header-anchor" href="#表的操作"><span>表的操作</span></a></h4><p>允许生成和删除行的表必须有一个列对象，其SYNTAX子句的值为<code>Rowstatus</code>，MAX-ACCESS子旬的值为<code>read-create</code>这种列叫做概念行的状态列。</p><p>状态列(Rowstatus)可取以下6种值。</p><ol><li>Active(可读写):被管理设备可以使用概念行。</li><li>NotlnService(可读写):概念行存在，但由于其他原因(下面解释)而不能使用。</li><li>NotReady(只读):概念行存在，但因没有信息而不能使用。</li><li>CreateAndGo(只写不读):管理站生成一个概念行实例时先设置成这种状态，生成过程结束时自动变为active，被管理设备就可以使用了。</li><li>CreateAndWait(只写不读):管理站生成一个概念行实例时先设置成这种状态，但不会自动变成active。</li><li>Destroy(只写不读):管理站需删除所有的概念行实例时设置成这种状态。</li></ol><h4 id="通知与信息模块" tabindex="-1"><a class="header-anchor" href="#通知与信息模块"><span>通知与信息模块</span></a></h4><p>=== 略 ===</p><h4 id="snmpv2协议数据单元" tabindex="-1"><a class="header-anchor" href="#snmpv2协议数据单元"><span>SNMPv2协议数据单元</span></a></h4><p><img src="`+C+'" alt="img.png"></p><p>GetBulkRequest: <img src="'+B+'" alt="img.png"><img src="'+f+'" alt="img.png"> InformRequest PDU： 这是管理站发送给管理站的消息，PDU格式与Get等操作相同，变量绑定表的内容与陷入报文一样。但是与陷入不同，这个消息是需要应答的。因此，管理站收到通知请求后首先要决定应答报文的大小，如果应答报文的大小超过本地或对方的限制，则返回错误状态tooBig。</p><p>SNMPv2增加的管理站之间的通信机制是分布式网络管理所需要的功能特征，为此引入了通知报文InformRequest和管理站数据库（manager-to-manager MIB）。管理站数据库主要由3 个表组成。</p><ol><li>snmpAlarmTable：报警表提供被监视的变量的有关情况，类似于RMON 警报组的功能，但这个表记录的是管理站之间的报警信息。</li><li>snmpEventTable：事件表记录SNMPv2实体产生的重要事件，或者是报警事件，或者是通知类型宏定义的事件。</li><li>snmpEventNotifyTable：事件通知表定义了发送通知的目标和通知的类型。</li></ol><h3 id="_5-4-snmpv3管理框架" tabindex="-1"><a class="header-anchor" href="#_5-4-snmpv3管理框架"><span>5.4 SNMPv3管理框架</span></a></h3><p>在RFC 2571描述的管理框架中，以前称做管理站和代理的实体现在统一称做SNMP实体（SNMP Entity）。</p><p>实体 = 一个SNMP引擎（SNMP Engine） + 一个或多个有关的SNMP应用（SNMP Application）组成。</p><h2 id="测试题" tabindex="-1"><a class="header-anchor" href="#测试题"><span>测试题</span></a></h2><h3 id="第一章-网络管理概论" tabindex="-1"><a class="header-anchor" href="#第一章-网络管理概论"><span>第一章：网络管理概论</span></a></h3><p><mark><strong>填空题</strong></mark></p>',203)),a("ol",null,[a("li",null,[s[1]||(s[1]=i("国际标准化组织推出的 OSI系统管理标准是")),e(n,null,{default:l(()=>s[0]||(s[0]=[i("CMIP")])),_:1}),s[2]||(s[2]=i("。"))]),a("li",null,[s[4]||(s[4]=i("Internet工程工作小组（IETF）组织推出管理标准是")),e(n,null,{default:l(()=>s[3]||(s[3]=[i("SNMP")])),_:1}),s[5]||(s[5]=i("。"))]),a("li",null,[s[7]||(s[7]=i("对于互联网中的非标准设备， 通过一种叫做")),e(n,null,{default:l(()=>s[6]||(s[6]=[i("委托代理")])),_:1}),s[8]||(s[8]=i("的设备来进行管理，它与非标准设备之间运行制造商专有的协议。"))]),a("li",null,[s[10]||(s[10]=i("有两种技术可用于代理和监视器(管理者)之间的通信。一种叫做")),e(n,null,{default:l(()=>s[9]||(s[9]=[i("轮询")])),_:1}),s[11]||(s[11]=i(";一种叫做事件报告。"))]),a("li",null,[s[13]||(s[13]=i("在 Internet 中，对网络、设备和主机的管理叫做网络管理，网络管理信息存储在")),e(n,null,{default:l(()=>s[12]||(s[12]=[i("MIB库(管理信息库)")])),_:1}),s[14]||(s[14]=i("。"))]),a("li",null,[s[16]||(s[16]=i("连接测试属于故障管理中的")),e(n,null,{default:l(()=>s[15]||(s[15]=[i("故障诊断和定位")])),_:1}),s[17]||(s[17]=i("功能。"))])]),s[95]||(s[95]=d(`<p><mark><strong>选择题</strong></mark></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1. 在网络管理中，一般采用管理模型是（）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.管理者/代理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.客户机/服务器</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.网站/浏览器</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.CSMA/CD</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2. 系统管理操作在对等的开放系统之间进行，一个系统为管理站，另一个系统起下列哪项的作用？</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.管理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.监视</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.代理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.探测</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>C</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3. 在代理和监视器之间的通信中，代理主动发送信息给管理站的通信机制是（）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.轮询</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.事件报告</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.定时报告</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.预警</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4. 网络管理软件包括管理专用软件，管理支持软件和（）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.用户专用软件</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.用户支持软件</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.用户管理软件</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.用户接口软件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">5. ISO定义的系统管理功能域中，测试管理功能属于（）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.配置管理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.故障管理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.性能管理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.安全管理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6. 下述各选项中，属于配置功能的范畴的功能是（）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.测试管理功能</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.数据收集功能</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.工作负载监视功能</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.定义和修改网络元素间的互联关系</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">7. 网络管理中的安全管理是保护管理站和代理之间的下列哪项的安全（）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.信息交换</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.信息存储</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.信息索引</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.完整信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">8. 以下属于面向服务的性能指标是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.可用性</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.吞吐量</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.丢包率</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.利用率</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="hint-container note"><p class="hint-container-title">注</p><p>网络管理是指对网络的运行状态进行监测和控制，并能最大限度地满足网络管理者和网络用户对计算机网络的 有效性、可靠性、开放性、综合性、安全性和经济性的要求。</p><p>当前有两种主要的网络管理体系结构，即基于OSI参考模型的公共管理信息协议（CMIP）体系结构与 基于TCP/IP参考模型的简单网络管理协议（SNMP）体系结构。</p><p>在网络管理中，一般采用“管理者—代理”的基本管理模型来构建网络管理系统，进行实际的网络管理。 网络管理系统的基本模型包括4个要素组成，分别是网络管理者、管理代理、管理信息库和网络管理协议。 当前建立有效的网络管理模式，主要有3种方法：集中式网络管理模式、分布式网络管理模式、混合式网络管理模式。</p></div><h3 id="第二章-抽象语法表示" tabindex="-1"><a class="header-anchor" href="#第二章-抽象语法表示"><span>第二章：抽象语法表示</span></a></h3><p><mark><strong>填空题</strong></mark></p>`,20)),a("ol",null,[a("li",null,[s[19]||(s[19]=i("表示实体(ASN.1)定义了应用数据的")),e(n,null,{default:l(()=>s[18]||(s[18]=[i("抽象语法")])),_:1})]),a("li",null,[s[21]||(s[21]=i("计算机网络管理中提供统一的网络数据表示的形式语言是")),e(n,null,{default:l(()=>s[20]||(s[20]=[i("ASN.1")])),_:1})]),a("li",null,[s[26]||(s[26]=i("ASN.1定义的标签类型可分为四类，分别是 ")),e(n,null,{default:l(()=>s[22]||(s[22]=[i("通用标签")])),_:1}),s[27]||(s[27]=i("、 ")),e(n,null,{default:l(()=>s[23]||(s[23]=[i("应用标签")])),_:1}),s[28]||(s[28]=i(" 、 ")),e(n,null,{default:l(()=>s[24]||(s[24]=[i("上下文专用标签")])),_:1}),s[29]||(s[29]=i(" 、 ")),e(n,null,{default:l(()=>s[25]||(s[25]=[i("私有标签")])),_:1}),s[30]||(s[30]=i(" 。"))]),a("li",null,[s[35]||(s[35]=i("数据类型可分为四类，分别是 ")),e(n,null,{default:l(()=>s[31]||(s[31]=[i("简单类型")])),_:1}),s[36]||(s[36]=i("、 ")),e(n,null,{default:l(()=>s[32]||(s[32]=[i("构造类型")])),_:1}),s[37]||(s[37]=i(" 、 ")),e(n,null,{default:l(()=>s[33]||(s[33]=[i("标签类型")])),_:1}),s[38]||(s[38]=i(" 、 ")),e(n,null,{default:l(()=>s[34]||(s[34]=[i("其他类型")])),_:1}),s[39]||(s[39]=i(" 。"))]),a("li",null,[s[42]||(s[42]=i("用SEQUENCE/SET表示 ")),e(n,null,{default:l(()=>s[40]||(s[40]=[i("不同类型元素")])),_:1}),s[43]||(s[43]=i(" 的序列/集合，用SEQUENCE OF/SET OF表示 ")),e(n,null,{default:l(()=>s[41]||(s[41]=[i("相同类型元素")])),_:1}),s[44]||(s[44]=i(" 的序列/集合"))]),a("li",null,[s[47]||(s[47]=i("宏定义 由")),e(n,null,{default:l(()=>s[45]||(s[45]=[i("类型表示")])),_:1}),s[48]||(s[48]=i("(TYPE NOTATION)、")),e(n,null,{default:l(()=>s[46]||(s[46]=[i("值表示")])),_:1}),s[49]||(s[49]=i("(VALUE NOTATION)和支持产生式 3 部分组成。"))])]),s[96]||(s[96]=d(`<p><mark><strong>选择题</strong></mark></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1. ASN.1定义的数据类型有20多种，其标签值类型都是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.UNIVERSAL</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.APPLICATION</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.PUBLIC</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.PRIVATE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2. 表示不同类型元素集合的构造类型是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.SEQUENCE OF</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.SEQUENCE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.SET</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.SET OF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>C</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3. FamilyMemberName ::= SET{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SonName[1] IMPLICIT IA5String,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MotherName[2] IMPLICIT IA5String OPTIONAL,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FatherName[3] IMPLICIT IA5String OPTIONAL</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">} 三个元素使用的标签[1][2][3]是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.通用标签</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.应用标签</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.上下文标签</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.私有标签</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>C</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4. 在ASN.1的数据类型分类中由己知类型定义的新类型是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.简单类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.构造类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.其他类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.标签类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">5. 下面属于ASN.1定义的简单类型的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.OBJECT IDENTIFIER类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.构造类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.标签类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.CHOICE类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6. 以下对ASN.1的简单数据类型的描述正确的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.简单类型就是BOOLEAN、INTEGER、BIT STRING、OCTETSTRING、REAL和ENUMERATED这是基本类型。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.枚举类型ENUMERATED也能进行任何算术运算。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.20000721182053.7是UTCTime类型的一个值，表示2000年7月21日，当地时间18点20分53.7秒。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.20000721182053.7是GeneralizedTime类型的一个值，表示2000年7月21日，当地时间18点20分53.7秒。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">7. 在ASN.1子类型的描述中，值区间这种方法只能应用于()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.整数和实数类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.布尔类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.字符串类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.CHOICE类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">8. SNMP管理对象定义的Counter数据类型可用于表示下列哪类型的管理对象?</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.接口收到的总字节数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.接口的管理状态</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.接口输出队列的长度</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.接口数据速率</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">9. RFC1155 定义的未知数据类型是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.Counter</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.TimeTicks</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.Gauge</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.Opaque</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code> Counter:计数器，其值只能增加不能减少，达到最大值2^32-1后回零； 作用：用于计算收到的分组数或字节数</p><p>Gauge: 计量器，其值可以增加，可以减少，达到最大值锁定2^32-1，直到复位； 作用：用于存储在缓冲队列中的分组数</p><p>Opaque:不透明类型即未知数据类型，或者说可以表示任何类型； 数据编码按照OCTET STRING来处理，管理站和代理能解释这种类型。</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10. 基本编码规则把表示的抽象类型值编码为()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.字节串</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.字符串</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.数值</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.逻辑值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><p><mark><strong>简答题</strong></mark></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1. 为什么要用宏定义? 怎样用宏定义得到宏实例?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p>ASN.1宏提供了创建“模板”的功能，这也是引入ASN.1宏的原因。ASN.1宏使得ASN.1语言具有良好的扩充性。</p><p>当用一个具体的值代替宏定义中的变量或参数时就产生了宏实例， 它表示一个实际的ASN.1类型(称为返回的类型)并且规定了该类型可取的值的集合(称为返回的值)。</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.十进制数256的编码______。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T: 00 0 00010  -&gt; 02</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L: 02 -&gt; 02</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">V: 0000 0001 0000 0000 -&gt;01 00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res = 02 02 01 00</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">128因为最高位比特位为1，所以在此之前添加一个全为0的八位组，即0000 0000 | 1000 0000</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BER(128) = 02 02 00 80 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-128: 1. 求正数 2. 取反 3. 加1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.1000 0000  2. 0111 1111 3.1000 0000</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BER(128) = 02 01 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-129: 1.0000 0000 1000 0001 2.1111 1111 0111 1110 3.1111 1111 0111 1111</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BER(-129) = 02 02 FF 7F</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2.比特串10101的编码______。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T: 00 0 00011 -&gt; 03</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L: 02 -&gt; 02</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">V: 0000 0011 1010 1000 -&gt; 03 A8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3.字节串ACE可编码为______。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T: 00 0 00100 -&gt; 04</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L: 02 -&gt; 02</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">V: 1010 1100 1110 0000-&gt; AC E0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4.NULL可编码为______。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T:00 0 00101 -&gt; 05</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L: 0000 -&gt; 00</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">5. 位串值0A3B5F291CD的编码是_____。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">简单类型：</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T: 03</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L: 7</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">V: 04 0A B5 F2 91 1C D0</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">构造类型：0A3B | 5F291CD</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T: 00 1 00011 -&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L: </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">V: TLV: 03 03 00 0A 3B?(00表示后续没有补位的0)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   TLV: 03 05 5F 29 1C D0 00?(00先发送消息给对方，但是完整的消息并未发送完全)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6. 字节串ACE的编码:______;字符串ACE的编码:______。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">字节串ACE: 04 02 AC E0</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">字符串ACE: 16 03 41 43 45(A的十进制ascii码: 65, A的十六进制ascii码: 41)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">7.对象标识符{2 100 3}的编码_____。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">40X + Y = 2*40+100 = 180,{2 100 3} = {180,3}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Binary(180) = 1011 0100</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">因为规定1~7位为标识符有效位，最后一个八位组的第八位为0，其余八位组最第一位为1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=&gt; 1011 0100 -&gt; 1000 0001, 0011 0100 -&gt; 81 34</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OID   L    V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">06    03   81 34 03</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res = 06 03 81 34 03</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">8. 序列类型{name: IA5String, ok:BOOLEAN}, 那么值为：{name:&quot;Smith&quot;,ok :TRUE}的编码</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">             Seq      L          V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">00 1 10000 -&gt;30       ?(0A)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                               IA5    L      V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                               16     05     53 6D 69 74 68</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                               BOOL   L      V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                               01     01     FF </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">9. Password ::= [APPLICATION 27] OCTET STRING, &quot;Sesame&quot;为此类型，求其编码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(显示标签+构造类型————因为需要编码APPLICATION 和OCTET STRING)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">APP             L     V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">01 1 11011      08    OCT     L      V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                      04      06      53   65 73 61 6D 65</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res = 7B 08 04 06 53 65 73 61 6D 65</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10. Password ::= [APPLICATION 27]IMPLICIT OCTET STRING，&quot;Sesame&quot;为此类型，求其编码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(隐式标签(IMPLICIT)+构造类型————看新标签，只编码APPLICATION一种类型)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">APP   L    V</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">7B    06    53 65 73 61 6D 65</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">res = 7B 08 65 73 61 6D 65</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p>请您向上兼容！！！</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2. 用BER对数据进行编码:标签值=1011001010，长度=255。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p>TAG: 10 1100 1010 -&gt; 101 1001010 -&gt; 1000 0101 0 1001010 Length: 1111 1111 -&gt; 1000 0001 1111 1111</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3. 用BER编码，对长度字段L进行编码，L=18，L=180，L=1044?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><ol><li>Length: 0001 0010</li><li>Length: 1011 0100 -&gt; 1000 0001 1011 0100</li><li>Length: 100 0001 0100 -&gt; 1000 0010 0000 0100 0001 0100</li></ol></details><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Tag: 分七位，最后一个八位组起始补0，前面的八位组起始为1(七位有效)</p><p>Length: 补为多个八位组，前面第一个八位组表示后续有几个八位组(几个字节)(补充字节数目)</p></div><h3 id="第三章-internet管理信息结构" tabindex="-1"><a class="header-anchor" href="#第三章-internet管理信息结构"><span>第三章：Internet管理信息结构</span></a></h3><p>RFC 1065描述了SMI,在用于管理TCP/IP网络的MIB中可用的信息的语法和类型。</p><p><mark><strong>填空题</strong></mark></p>`,34)),a("ol",null,[a("li",null,[a("p",null,[s[51]||(s[51]=i("网络管理信息存储在")),e(n,null,{default:l(()=>s[50]||(s[50]=[i("MIB")])),_:1}),s[52]||(s[52]=i("中。"))])]),a("li",null,[a("p",null,[s[54]||(s[54]=i("IAB 代管的中间结点是")),e(n,null,{default:l(()=>s[53]||(s[53]=[i("Internet(1)")])),_:1}),s[55]||(s[55]=i("。"))])]),a("li",null,[a("p",null,[s[57]||(s[57]=i("mib-2 结点是")),e(n,null,{default:l(()=>s[56]||(s[56]=[i("mgmt(2)")])),_:1}),s[58]||(s[58]=i("结点的第一个子结点。"))])]),a("li",null,[a("p",null,[s[61]||(s[61]=i("标量对象(叶子结点):指 SMI中存储的")),e(n,null,{default:l(()=>s[59]||(s[59]=[i("简单对象")])),_:1}),s[62]||(s[62]=i("和表中的")),e(n,null,{default:l(()=>s[60]||(s[60]=[i("列对象")])),_:1}),s[63]||(s[63]=i("。"))])]),a("li",null,[a("p",null,[s[66]||(s[66]=i("SMI只存储")),e(n,null,{default:l(()=>s[64]||(s[64]=[i("标量")])),_:1}),s[67]||(s[67]=i("和")),e(n,null,{default:l(()=>s[65]||(s[65]=[i("二维数组")])),_:1}),s[68]||(s[68]=i("，后者叫做表对象。"))])]),a("li",null,[a("p",null,[s[73]||(s[73]=i("TCP连接表的索引由 4 个元素组成，这 4个元素分别为")),e(n,null,{default:l(()=>s[69]||(s[69]=[i("本地ip")])),_:1}),s[74]||(s[74]=i("、")),e(n,null,{default:l(()=>s[70]||(s[70]=[i("本地端口")])),_:1}),s[75]||(s[75]=i("、")),e(n,null,{default:l(()=>s[71]||(s[71]=[i("目的ip")])),_:1}),s[76]||(s[76]=i("、")),e(n,null,{default:l(()=>s[72]||(s[72]=[i("目的端口")])),_:1}),s[77]||(s[77]=i("。这 4个元素的组合惟一的区分表中的一行。"))])]),a("li",null,[a("p",null,[s[80]||(s[80]=i("列对象实例: 列对象的")),e(n,null,{default:l(()=>s[78]||(s[78]=[i("OID(对象标识符)")])),_:1}),s[81]||(s[81]=i("与")),e(n,null,{default:l(()=>s[79]||(s[79]=[i("INDEX(索引对象的值)")])),_:1}),s[82]||(s[82]=i("组合起来就说明了列对象的一个实例。"))])]),a("li",null,[a("p",null,[e(n,null,{default:l(()=>s[83]||(s[83]=[i("词典顺序")])),_:1}),s[84]||(s[84]=i(":按照一定的方式(例如中序)遍历 MIB 树，就可以排出所有对象及其实例的顺序。"))])]),s[85]||(s[85]=a("li",null,[a("p",null,[a("mark",null,[a("strong",null,"选择题")])])],-1))]),s[97]||(s[97]=d(`<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">在SNMPv1中定义管理信息结构，即规定管理对象的语法和语义的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.RFC1155</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.RFC1157</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.RFC1212</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.RFC1213</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">在SNMP协议中，每个代理进程管理若干管理对象，并且与某些管理站建立()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">团体关系</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">互连关系</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">地址关系</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">安全关系</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SNMP 管理对象定义的 Counter 数据类型可用于表示下列哪类型的管理对象?</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">接口收到的总字节数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">接口的管理状态</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">接口输出队列的长度</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">接口数据速率</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">RFC1155 定义的未知数据类型是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.Counter</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.TimeTicks</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.Gauge</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.Opaque</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MIB-2 对象类型定义的 STATUS 子句中，表示当前必须支持这种对象，但在将来的标准中可能被取消的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.optional</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.obsolete</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.deprecated</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p><p><code>SYNTAX:</code></p><p>表示对象类型的抽象语法。</p><p><code>ACCESS:</code></p><p>定义对象的访问方式。可选择的访问方式有只读(read-only)、读写(read-write)、只写(write-only)和不可访问(not-accessible)4种(MIB树中的非叶子节点不能访问)。</p><p><code>STATUS:</code></p><p>说明实现是否支持这种对象。 状态子句中定义了 必要的(mandatory) 任选的(optional) 过时的(obsolete)是指老标准支持而新标准不支持的类型 如果一个对象被说明为可取消的(deprecated)，则表示当前必须支持这种对象，但在将来的标准中可能被取消。</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">在对象标识树中，SNMP操作可以访问的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.叶子结点</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.全部中间结点</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.根结点</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.部分中间结点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">对象标识符是整数序列，这种序列反映了该对象在 MIB中的逻辑位置，同时表示了一种()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.数据类型</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.词典顺序</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.对象状态</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.对象实例</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><h3 id="第四章-管理信息库" tabindex="-1"><a class="header-anchor" href="#第四章-管理信息库"><span>第四章：管理信息库</span></a></h3><p><mark><strong>填空题</strong></mark></p>`,16)),a("ol",null,[a("li",null,[s[88]||(s[88]=i("MIB-2 功能组的 IP 组包含三个表对象: IP 地址表、")),e(n,null,{default:l(()=>s[86]||(s[86]=[i("IP路由表")])),_:1}),s[89]||(s[89]=i("和")),e(n,null,{default:l(()=>s[87]||(s[87]=[i("IP地址转化表")])),_:1}),s[90]||(s[90]=i("。"))])]),s[98]||(s[98]=d(`<p><mark><strong>选择题</strong></mark></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1. 系统服务对象 sysServices 是7位二进制数，如果系统只提供应用层和传输层服务，则其值为()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.1001000</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.1010000</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.1000100</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.1001100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code> [从左往右边] -&gt; [(应用层) -&gt;(物理层)] 000 0000 因为提供应用层和传输层服务 所以100 1000</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MIB-2 功能组中的系统组提供了系统的一般信息如果系统服务对象 sysServices 的值为十进制的 72，则系统提供()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">应用层和表示层服务</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">应用层和传输层服务</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">表示层和会话层服务</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">会话层和传输层服务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code> Binary(72) = 100 1000 所以为应用层和传输层</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MIB-2 接口组中的对象 ifAdminStatus 和ifOperStatus分别取值 up(1)和down(2)的含义是0)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.正常</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.故障</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.停机</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MIB-2 中保留地址转换组是为了与 MIB-1()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.传输命令</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.兼容</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.接口关联</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.不一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MIB-2 的IP 组中IP 地址表中与接口组中的对象iflndex 取值一致的对象是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.ipAdEntAddr</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.ipAdEntlfIndex</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.ipAdEntNetMask</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.ipAdEntBcastAddr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><h3 id="第五章-简单网络管理协议" tabindex="-1"><a class="header-anchor" href="#第五章-简单网络管理协议"><span>第五章：简单网络管理协议</span></a></h3><p><mark><strong>填空题</strong></mark></p>`,13)),a("p",null,[s[92]||(s[92]=i("1.SNMPv2 SMI是对 SNMPV1 SMI的扩充，它引入了 4个关键的概念是:")),e(n,null,{default:l(()=>s[91]||(s[91]=[i("对象的定义")])),_:1}),s[93]||(s[93]=i("、概念表、通知的定义、信息模块。"))]),s[99]||(s[99]=d(`<p><mark><strong>选择题</strong></mark></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1. TCP/IP 网络管理最初使用的是</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.SGMP(网管监控协议)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.SNMPv1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.SNMPv2</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.CMOT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2. 在 SNMPv1 中定义管理信息结构，即规定管理对象的语法和语义的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.RFC1155</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.RFC1157</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.RFC1212</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.RFC1213</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3. 描述 SNMPv1 规范的RFC文档是</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.RFC1155</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.RFC1157</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.RFC1212</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.RFC1213</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4. Internet 最初的网络管理框架由四个文件定义RFC1212 说明了()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.定义 MIB 模块的方法</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.定义了管理信息结构</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.定义了 MIB-2 管理对象的核心集合</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.SNMPv1 协议的规范文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">5. SNMPv3不仅能与SNMPv1和SNMPv2兼容而且在SNMPv2C的基础上增加了()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.用户使用数量</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.网络服务质量</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.网络传输速度</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.安全和高层管理功能</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6.关于 SNMPv1 支持的操作，下面描述正确的是</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.管理站可以增加或删除表中的一行</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.管理站可以访问叶子节点</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.管理站可以访问子树节点</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.管理站可以一次性访问整个表内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">7. SNMP 报文的组成部分包括()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.版本号、团体号、 MIB</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.版本号、主机号、协议数据单元(PDU)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.版本号、团体号、协议数据单元(PDU)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.版本号、用户号、协议数据单元(PDU)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>C</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">8. 在 SNMP 协议中，团体名(Community)是用于</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.身份认证</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.定义上下文</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.确定执行环境</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.定义 SNMP 实体可访问的 MIB 对象子集</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">9. 此处添加题目描述下面几种 SNMPV1 PDU 具有相同格式的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.GetRequestPDU，GetNextRequestPDU，SetRequestPDU，TrapPDU</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.GetRequestPDU，GetNextRequestPDU，SetRequestPDU</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.GetRequestPDU，GetNextRequestPDU，TrapPDU，GetResponsePDU</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.SeGetRequestPDU，TrapPDU，SetRequestPDU，GetResponsePDU</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10. 在 SNMP 协议支持的服务原语中，提供从代理进程到管理站异步报告机制的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.Trap</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.Get</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.GetNext</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.Set</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">11. 在 SNMP 协议支持的服务原语中，提供从代理程到管理站异步报告机制的是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.Trap</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.Get</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.GetNext</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.Set</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">12. SNMP 报文在管理站和代理之间传送。由代理发给管理站，不需应答的报文是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.SetResquest</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.GetResquest</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.GetResponse</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.Trap</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">13. SNMPv1 的操作中，如果要删除表中的行，行的所有者发出 SetRequest PDU，把行的状态对象置为()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.invalid</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.valid</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.createrequest</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.undercreation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">14. SNMPv1 的操作中，使用 Set 命令设置多个变量时若有一个变量的名字和要设置的值在类型、长度或实际值方面不匹配，则返回的错误条件是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.badValue</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.genError</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.tooBig</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.noSuchName</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code> badValue: 本来是Integer，你管理站却要设置为Octet String, 显示badValue genError: 响应实体如不能提供至少一个对象的值 noSuchName: 没有对象实例生成。</p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">15. SNMPv2定义的Gauge32的特性是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.单增归零</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.可增减归零</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.单增不归零</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.可增减不归零</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">16. SNMPv2定义的64位计数器是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.单增归零</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.可增减归零</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.单增不归零</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.可增减不归零</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">17. 下列()不是SNMPv2的STATUS子句的可选状态。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.current</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.mandatory</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.Deprecated</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.obsolete</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">18. SNMPv2 定义的访问类型增加了一个与概念行有关的访问类型是</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.read-only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.read-write</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.write-only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.read-create</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>D</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">19. SNMPv2 的5种访问级别由小到大排列是()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.not-accessible, accessible-for-notify, read-only, read-write, read-create</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.read-only, read-write, read-create,not-accessible, accessible-for-notify</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.read-only,write-only, read-write, read-create, accessible-for-notify</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.accessible-for-notify, not-accessible, read-only, read-write, read-create</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">20. 在 MIB 的管理信息结构中，表对象和行对象称为概念表和概念行，其访问特性应为()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.Not-Accessible</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.Read-Create</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.Read-Only</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.Read-Write</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">21. 在 SNMPv2 中，下列哪项提供了一种在表中添加或删除行的标准方法(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.RowStatus</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.EntryStatus</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.OwnerString</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.DisplayString</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>A</code></p></details><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">22. SNMPv2 中，管理站发出 set 命令，把状态列置为下列哪项， 可将概念行删除。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A.invalid</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">B.destroy</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C.notReady</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D.notinService</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点我查看答案 &amp; 解析</summary><p><code>B</code></p></details>`,45))])}const T=t(I,[["render",S]]),M=JSON.parse('{"path":"/network/n0rmn2lz/","title":"计算机网络管理","lang":"zh-CN","frontmatter":{"title":"计算机网络管理","icon":"oui:app-index-management","createTime":"2024/12/06 11:37:01","permalink":"/network/n0rmn2lz/","description":"1.网络管理概论 1.1 网络管理的几个概念 网络管理的任务： 监测网络的运行状态 控制网络的运行 网络管理的目标： 有效性 2. 可靠性 3. 开放性 4. 综合性 5. 安全性 6. 经济性 网络管理的对象： 硬件资源 2. 软件资源 被管对象(Managed Object)的集合称之为MIB(Management Information Base...","head":[["meta",{"property":"og:url","content":"https://paiad.online/network/n0rmn2lz/"}],["meta",{"property":"og:site_name","content":"𝑷𝒂𝒊𝒂𝒅"}],["meta",{"property":"og:title","content":"计算机网络管理"}],["meta",{"property":"og:description","content":"1.网络管理概论 1.1 网络管理的几个概念 网络管理的任务： 监测网络的运行状态 控制网络的运行 网络管理的目标： 有效性 2. 可靠性 3. 开放性 4. 综合性 5. 安全性 6. 经济性 网络管理的对象： 硬件资源 2. 软件资源 被管对象(Managed Object)的集合称之为MIB(Management Information Base..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-11T17:22:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-11T17:22:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-11T17:22:20.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":48.63,"words":14589},"git":{"updatedTime":1741713740000,"contributors":[{"name":"paiad","username":"paiad","email":"2369538173@qq.com","commits":12,"avatar":"https://avatars.githubusercontent.com/paiad?v=4","url":"https://github.com/paiad"}]},"autoDesc":true,"filePathRelative":"notes/network/30/Snmp.md"}');export{T as comp,M as data};
