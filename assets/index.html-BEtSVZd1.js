import{_ as t,c as o,a as r,o as i}from"./app-Bc55BiT6.js";const a={};function n(s,e){return i(),o("div",null,e[0]||(e[0]=[r('<h3 id="git-提交信息规范" tabindex="-1"><a class="header-anchor" href="#git-提交信息规范"><span>Git 提交信息规范</span></a></h3><p>在开发中使用一致的<a href="https://hoeyzheng.top/article/24031901/" target="_blank" rel="noopener noreferrer">Git 提交信息格式</a>有助于提高团队协作效率，清晰地记录每个提交的目的和内容。以下是一些常见的（commit types），这些类型帮助明确每个提交的意义，并确保项目的版本历史清晰、易于管理。</p><h3 id="提交类型列表" tabindex="-1"><a class="header-anchor" href="#提交类型列表"><span>提交类型列表</span></a></h3><h4 id="_1-feat-feature" tabindex="-1"><a class="header-anchor" href="#_1-feat-feature"><span>1. <strong><code>feat</code></strong> (Feature)</span></a></h4><ul><li><strong>定义</strong>：用于表示引入了一个新功能或功能增强。</li><li><strong>示例</strong>：<code>feat: add user authentication feature</code></li><li><strong>用途</strong>：每当你实现一个新的功能模块或对现有功能进行显著增强时，使用 <code>feat</code> 类型。</li></ul><h4 id="_2-fix-bug-fix" tabindex="-1"><a class="header-anchor" href="#_2-fix-bug-fix"><span>2. <strong><code>fix</code></strong> (Bug Fix)</span></a></h4><ul><li><strong>定义</strong>：用于表示修复了一个 bug 或问题。</li><li><strong>示例</strong>：<code>fix: resolve login issue when using incorrect credentials</code></li><li><strong>用途</strong>：每当修复代码中的错误或不正常行为时，使用 <code>fix</code> 类型。</li></ul><h4 id="_3-docs-documentation" tabindex="-1"><a class="header-anchor" href="#_3-docs-documentation"><span>3. <strong><code>docs</code></strong> (Documentation)</span></a></h4><ul><li><strong>定义</strong>：用于更新项目文档（如 <code>README.md</code>、API 文档等），而不涉及代码变更。</li><li><strong>示例</strong>：<code>docs: update README with new installation instructions</code></li><li><strong>用途</strong>：更新项目的文档或其他说明性文件时使用。</li></ul><h4 id="_4-style-code-style" tabindex="-1"><a class="header-anchor" href="#_4-style-code-style"><span>4. <strong><code>style</code></strong> (Code Style)</span></a></h4><ul><li><strong>定义</strong>：用于表示修改了代码的格式（如缩进、空格、分号等），但不影响代码的功能。</li><li><strong>示例</strong>：<code>style: format code according to ESLint rules</code></li><li><strong>用途</strong>：主要用于改善代码风格，不会修改代码逻辑。</li></ul><h4 id="_5-refactor-code-refactoring" tabindex="-1"><a class="header-anchor" href="#_5-refactor-code-refactoring"><span>5. <strong><code>refactor</code></strong> (Code Refactoring)</span></a></h4><ul><li><strong>定义</strong>：用于表示对现有代码的重构，不改变其功能，但可能改善了代码的可读性、结构或性能。</li><li><strong>示例</strong>：<code>refactor: simplify user data validation logic</code></li><li><strong>用途</strong>：当你对代码进行了重构以提升其质量或可维护性，但不涉及功能修改时，使用 <code>refactor</code>。</li></ul><h4 id="_6-perf-performance" tabindex="-1"><a class="header-anchor" href="#_6-perf-performance"><span>6. <strong><code>perf</code></strong> (Performance)</span></a></h4><ul><li><strong>定义</strong>：用于表示代码优化，提升了性能（例如，减少了加载时间或降低了内存消耗）。</li><li><strong>示例</strong>：<code>perf: improve image loading speed by lazy loading</code></li><li><strong>用途</strong>：每当你对性能进行优化时，使用 <code>perf</code> 类型。</li></ul><h4 id="_7-test-testing" tabindex="-1"><a class="header-anchor" href="#_7-test-testing"><span>7. <strong><code>test</code></strong> (Testing)</span></a></h4><ul><li><strong>定义</strong>：用于表示添加或修改了测试代码。</li><li><strong>示例</strong>：<code>test: add unit tests for authentication logic</code></li><li><strong>用途</strong>：增加、修改、修复测试代码时使用。</li></ul><h4 id="_8-chore-chores" tabindex="-1"><a class="header-anchor" href="#_8-chore-chores"><span>8. <strong><code>chore</code></strong> (Chores)</span></a></h4><ul><li><strong>定义</strong>：用于表示一些杂项任务，例如更新构建工具、配置文件、依赖项更新等，通常不会影响源代码功能。</li><li><strong>示例</strong>：<code>chore: update dependencies to latest versions</code></li><li><strong>用途</strong>：进行一些非业务代码的修改，比如构建工具、依赖更新、构建优化等。</li></ul><h4 id="_9-build-build-system" tabindex="-1"><a class="header-anchor" href="#_9-build-build-system"><span>9. <strong><code>build</code></strong> (Build System)</span></a></h4><ul><li><strong>定义</strong>：用于表示与构建系统相关的更改，例如构建脚本、依赖项的更新等。</li><li><strong>示例</strong>：<code>build: add webpack configuration for production build</code></li><li><strong>用途</strong>：与构建相关的更改。</li></ul><h4 id="_10-ci-continuous-integration" tabindex="-1"><a class="header-anchor" href="#_10-ci-continuous-integration"><span>10. <strong><code>ci</code></strong> (Continuous Integration)</span></a></h4><ul><li><strong>定义</strong>：用于表示与持续集成（CI）相关的更改，例如更新 CI 配置文件、修复 CI 流程中的问题等。</li><li><strong>示例</strong>：<code>ci: update GitHub Actions workflow for testing</code></li><li><strong>用途</strong>：用于修改 CI 配置文件或修复 CI 相关的问题。</li></ul><h4 id="_11-revert-revert-changes" tabindex="-1"><a class="header-anchor" href="#_11-revert-revert-changes"><span>11. <strong><code>revert</code></strong> (Revert Changes)</span></a></h4><ul><li><strong>定义</strong>：用于表示撤销一个已经提交的修改，恢复到之前的状态。</li><li><strong>示例</strong>：<code>revert: undo feature branch changes due to bugs</code></li><li><strong>用途</strong>：当你需要撤销某个提交时使用 <code>revert</code>，它会自动创建一个新的提交来撤销原来的更改。</li></ul><h4 id="_12-merge-merge" tabindex="-1"><a class="header-anchor" href="#_12-merge-merge"><span>12. <strong><code>merge</code></strong> (Merge)</span></a></h4><ul><li><strong>定义</strong>：用于表示一次合并提交，通常在分支合并时使用。</li><li><strong>示例</strong>：<code>merge: merge feature/login into main</code></li><li><strong>用途</strong>：用于分支合并，表示本次提交是合并操作。</li></ul><hr><h3 id="提交信息格式" tabindex="-1"><a class="header-anchor" href="#提交信息格式"><span>提交信息格式</span></a></h3><p>提交信息通常遵循以下结构：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;message&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>&lt;type&gt;</code></strong>：提交类型（如 <code>feat</code>、<code>fix</code> 等）。</li><li><strong><code>&lt;scope&gt;</code></strong>：可选项，表示更改的范围或模块（例如，<code>auth</code>、<code>login</code>、<code>UI</code> 等）。 <ul><li>例如，<code>feat(auth)</code> 表示与认证相关的功能变更。</li></ul></li><li><strong><code>&lt;message&gt;</code></strong>：简短描述本次提交的目的和内容。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><ul><li><code>feat(auth): add login functionality</code></li><li><code>fix(header): fix bug causing header misalignment</code></li><li><code>chore(deps): update React to v18</code></li><li><code>docs: update API documentation for user registration</code></li><li><code>refactor: improve login logic readability</code></li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>采用 <strong>Git 提交信息规范</strong> 可以显著提高团队协作效率，使得版本历史更加清晰、有序，便于后续查阅和维护。通过使用标准的提交类型（如 <code>feat</code>、<code>fix</code>、<code>docs</code> 等），开发人员可以快速理解每个提交的目的和内容，进而更好地进行代码回滚、版本发布等操作。</p><hr>',38)]))}const d=t(a,[["render",n]]),l=JSON.parse('{"path":"/article/77o0qn29/","title":"🐢Git提交类型","lang":"zh-CN","frontmatter":{"title":"🐢Git提交类型","createTime":"2025/01/14 16:03:03","tags":["Git"],"permalink":"/article/77o0qn29/","description":"Git 提交信息规范 在开发中使用一致的Git 提交信息格式有助于提高团队协作效率，清晰地记录每个提交的目的和内容。以下是一些常见的（commit types），这些类型帮助明确每个提交的意义，并确保项目的版本历史清晰、易于管理。 提交类型列表 1. feat (Feature) 定义：用于表示引入了一个新功能或功能增强。 示例：feat: add u...","head":[["meta",{"property":"og:url","content":"https://paiad.online/article/77o0qn29/"}],["meta",{"property":"og:site_name","content":"𝑷𝒂𝒊𝒂𝒅"}],["meta",{"property":"og:title","content":"🐢Git提交类型"}],["meta",{"property":"og:description","content":"Git 提交信息规范 在开发中使用一致的Git 提交信息格式有助于提高团队协作效率，清晰地记录每个提交的目的和内容。以下是一些常见的（commit types），这些类型帮助明确每个提交的意义，并确保项目的版本历史清晰、易于管理。 提交类型列表 1. feat (Feature) 定义：用于表示引入了一个新功能或功能增强。 示例：feat: add u..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-22T04:57:45.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2025-02-22T04:57:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🐢Git提交类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-22T04:57:45.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.59,"words":1077},"git":{"updatedTime":1740200265000,"contributors":[{"name":"paiad","username":"paiad","email":"2369538173@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/paiad?v=4","url":"https://github.com/paiad"}]},"autoDesc":true,"filePathRelative":"learning/multi/GitCommits.md","categoryList":[{"id":"25a9ac","sort":10002,"name":"learning"},{"id":"e7f12e","sort":10005,"name":"multi"}]}');export{d as comp,l as data};
