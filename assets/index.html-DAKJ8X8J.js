import{_ as e,c as d,a,o as r}from"./app-Bc55BiT6.js";const o={};function p(n,t){return r(),d("div",null,t[0]||(t[0]=[a('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>哈希表是一种键值对数据结构，利用哈希函数将键转化为数组索引来存储和检索数据。它通过直接定位实现快速操作，通常查找时间为 O(1)， 但若哈希函数分布不均或冲突多，可能变慢。它简单高效，常用于需要快速匹配的场景，如查找配对元素。</p></div><p>C++中map，有三种类型：</p><table><thead><tr><th>映射</th><th>底层实现</th><th>是否有序</th><th>数值是否可以重复</th><th>能否更改数值</th><th>查询效率</th><th>增删效率</th></tr></thead><tbody><tr><td>std::map</td><td>红黑树</td><td>key有序</td><td>key不可重复</td><td>key不可修改</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>std::multimap</td><td>红黑树</td><td>key有序</td><td>key可重复</td><td>key不可修改</td><td>O(log n)</td><td>O(log n)</td></tr><tr><td>std::unordered_map</td><td>哈希表</td><td>key无序</td><td>key不可重复</td><td>key不可修改</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。</p><p>同理，std::map 和std::multimap 的key也是有序的。</p><p>更多哈希表的理论知识请看<a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html" target="_blank" rel="noopener noreferrer">关于哈希表，你该了解这些！</a>。</p>',6)]))}const m=e(o,[["render",p]]),s=JSON.parse('{"path":"/leetcode/hash-table/","title":"哈希表","lang":"zh-CN","frontmatter":{"title":"哈希表","createTime":"2025/04/04 23:23:44","permalink":"/leetcode/hash-table/","description":"提示 哈希表是一种键值对数据结构，利用哈希函数将键转化为数组索引来存储和检索数据。它通过直接定位实现快速操作，通常查找时间为 O(1)， 但若哈希函数分布不均或冲突多，可能变慢。它简单高效，常用于需要快速匹配的场景，如查找配对元素。 C++中map，有三种类型： std::unordered_map 底层实现为哈希表，std::map 和std::mu...","head":[["meta",{"property":"og:url","content":"https://paiad.online/leetcode/hash-table/"}],["meta",{"property":"og:site_name","content":"𝑷𝒂𝒊𝒂𝒅"}],["meta",{"property":"og:title","content":"哈希表"}],["meta",{"property":"og:description","content":"提示 哈希表是一种键值对数据结构，利用哈希函数将键转化为数组索引来存储和检索数据。它通过直接定位实现快速操作，通常查找时间为 O(1)， 但若哈希函数分布不均或冲突多，可能变慢。它简单高效，常用于需要快速匹配的场景，如查找配对元素。 C++中map，有三种类型： std::unordered_map 底层实现为哈希表，std::map 和std::mu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-05T04:03:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-05T04:03:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"哈希表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-05T04:03:12.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":0.98,"words":293},"git":{"updatedTime":1743825792000,"contributors":[{"name":"paiad","username":"paiad","email":"2369538173@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/paiad?v=4","url":"https://github.com/paiad"}]},"autoDesc":true,"filePathRelative":"notes/leetcode/hash-table/README.md"}');export{m as comp,s as data};
